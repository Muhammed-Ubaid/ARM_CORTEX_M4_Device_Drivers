
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000093c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000ae4  08000ae4  00010ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000af0  08000af0  00010af8  2**0
                  CONTENTS
  4 .ARM          00000000  08000af0  08000af0  00010af8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000af0  08000af8  00010af8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000af0  08000af0  00010af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000af4  08000af4  00010af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010af8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000af8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000af8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010af8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000018fb  00000000  00000000  00010b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000048a  00000000  00000000  00012423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000118  00000000  00000000  000128b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000e0  00000000  00000000  000129c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000020c8  00000000  00000000  00012aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000015f4  00000000  00000000  00014b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000094d0  00000000  00000000  00016164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0001f634  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000038c  00000000  00000000  0001f688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000acc 	.word	0x08000acc

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000acc 	.word	0x08000acc

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <SPI_GPIOInits>:
 * PB12 --> SPI2_NSS
 * Alt function mode : 5 (reg for SPI2 config)
 * */

void SPI_GPIOInits(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx = GPIOB;
 80001fe:	4b0e      	ldr	r3, [pc, #56]	; (8000238 <SPI_GPIOInits+0x40>)
 8000200:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000202:	2302      	movs	r3, #2
 8000204:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000206:	2305      	movs	r3, #5
 8000208:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800020a:	2300      	movs	r3, #0
 800020c:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800020e:	2300      	movs	r3, #0
 8000210:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000212:	2302      	movs	r3, #2
 8000214:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000216:	230d      	movs	r3, #13
 8000218:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	4618      	mov	r0, r3
 800021e:	f000 f965 	bl	80004ec <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000222:	230f      	movs	r3, #15
 8000224:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f000 f95f 	bl	80004ec <GPIO_Init>
	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
	GPIO_Init(&SPIPins);
	*/

}
 800022e:	bf00      	nop
 8000230:	3710      	adds	r7, #16
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	40020400 	.word	0x40020400

0800023c <SPI2_Init>:

void SPI2_Init(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2Handle;
	SPI2Handle.pSPIx = SPI2;
 8000242:	4b0c      	ldr	r3, [pc, #48]	; (8000274 <SPI2_Init+0x38>)
 8000244:	607b      	str	r3, [r7, #4]
	SPI2Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000246:	2301      	movs	r3, #1
 8000248:	727b      	strb	r3, [r7, #9]
	SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800024a:	2301      	movs	r3, #1
 800024c:	723b      	strb	r3, [r7, #8]
	SPI2Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2;//8MHz SCLK
 800024e:	2300      	movs	r3, #0
 8000250:	72bb      	strb	r3, [r7, #10]
	SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000252:	2300      	movs	r3, #0
 8000254:	72fb      	strb	r3, [r7, #11]
	SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000256:	2300      	movs	r3, #0
 8000258:	733b      	strb	r3, [r7, #12]
	SPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 800025a:	2300      	movs	r3, #0
 800025c:	737b      	strb	r3, [r7, #13]
	SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_EN;// SSM enable for NSS pin
 800025e:	2301      	movs	r3, #1
 8000260:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2Handle);
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	4618      	mov	r0, r3
 8000266:	f000 fb35 	bl	80008d4 <SPI_Init>

}
 800026a:	bf00      	nop
 800026c:	3710      	adds	r7, #16
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	40003800 	.word	0x40003800

08000278 <main>:

int main(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b084      	sub	sp, #16
 800027c:	af00      	add	r7, sp, #0

	char user_data[] = "Hello World";
 800027e:	4a10      	ldr	r2, [pc, #64]	; (80002c0 <main+0x48>)
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	ca07      	ldmia	r2, {r0, r1, r2}
 8000284:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//Init GPIO pins for SPI
	SPI_GPIOInits();
 8000288:	f7ff ffb6 	bl	80001f8 <SPI_GPIOInits>

	//SPI init
	SPI2_Init();
 800028c:	f7ff ffd6 	bl	800023c <SPI2_Init>

	SPI_SSIConfig(SPI2,ENABLE);
 8000290:	2101      	movs	r1, #1
 8000292:	480c      	ldr	r0, [pc, #48]	; (80002c4 <main+0x4c>)
 8000294:	f000 fbd9 	bl	8000a4a <SPI_SSIConfig>

	//Enable SPI2 peripheral
	SPI_PeripheralControl(SPI2,ENABLE);
 8000298:	2101      	movs	r1, #1
 800029a:	480a      	ldr	r0, [pc, #40]	; (80002c4 <main+0x4c>)
 800029c:	f000 fbb9 	bl	8000a12 <SPI_PeripheralControl>

	//Send data
	SPI_SendData(SPI2, (uint8_t*)user_data, strlen(user_data));
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	4618      	mov	r0, r3
 80002a4:	f7ff ffa0 	bl	80001e8 <strlen>
 80002a8:	4602      	mov	r2, r0
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	4619      	mov	r1, r3
 80002ae:	4805      	ldr	r0, [pc, #20]	; (80002c4 <main+0x4c>)
 80002b0:	f000 fb78 	bl	80009a4 <SPI_SendData>

	//Disable SPI2 peripheral after sending data
	SPI_PeripheralControl(SPI2,DISABLE);
 80002b4:	2100      	movs	r1, #0
 80002b6:	4803      	ldr	r0, [pc, #12]	; (80002c4 <main+0x4c>)
 80002b8:	f000 fbab 	bl	8000a12 <SPI_PeripheralControl>


	while(1);
 80002bc:	e7fe      	b.n	80002bc <main+0x44>
 80002be:	bf00      	nop
 80002c0:	08000ae4 	.word	0x08000ae4
 80002c4:	40003800 	.word	0x40003800

080002c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c8:	480d      	ldr	r0, [pc, #52]	; (8000300 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ca:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d0:	480c      	ldr	r0, [pc, #48]	; (8000304 <LoopForever+0x6>)
  ldr r1, =_edata
 80002d2:	490d      	ldr	r1, [pc, #52]	; (8000308 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002d4:	4a0d      	ldr	r2, [pc, #52]	; (800030c <LoopForever+0xe>)
  movs r3, #0
 80002d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d8:	e002      	b.n	80002e0 <LoopCopyDataInit>

080002da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002de:	3304      	adds	r3, #4

080002e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e4:	d3f9      	bcc.n	80002da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002e6:	4a0a      	ldr	r2, [pc, #40]	; (8000310 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002e8:	4c0a      	ldr	r4, [pc, #40]	; (8000314 <LoopForever+0x16>)
  movs r3, #0
 80002ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002ec:	e001      	b.n	80002f2 <LoopFillZerobss>

080002ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f0:	3204      	adds	r2, #4

080002f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f4:	d3fb      	bcc.n	80002ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002f6:	f000 fbc5 	bl	8000a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002fa:	f7ff ffbd 	bl	8000278 <main>

080002fe <LoopForever>:

LoopForever:
    b LoopForever
 80002fe:	e7fe      	b.n	80002fe <LoopForever>
  ldr   r0, =_estack
 8000300:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000308:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800030c:	08000af8 	.word	0x08000af8
  ldr r2, =_sbss
 8000310:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000314:	2000001c 	.word	0x2000001c

08000318 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000318:	e7fe      	b.n	8000318 <ADC_IRQHandler>
	...

0800031c <GPIO_PeriClockControl>:
*	-
*	- This function does not return anything
*	- No remarks
*/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	460b      	mov	r3, r1
 8000326:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000328:	78fb      	ldrb	r3, [r7, #3]
 800032a:	2b01      	cmp	r3, #1
 800032c:	d162      	bne.n	80003f4 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a64      	ldr	r2, [pc, #400]	; (80004c4 <GPIO_PeriClockControl+0x1a8>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d106      	bne.n	8000344 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000336:	4b64      	ldr	r3, [pc, #400]	; (80004c8 <GPIO_PeriClockControl+0x1ac>)
 8000338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033a:	4a63      	ldr	r2, [pc, #396]	; (80004c8 <GPIO_PeriClockControl+0x1ac>)
 800033c:	f043 0301 	orr.w	r3, r3, #1
 8000340:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOI_PCLK_DIS();
		}

	}

}
 8000342:	e0b9      	b.n	80004b8 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4a61      	ldr	r2, [pc, #388]	; (80004cc <GPIO_PeriClockControl+0x1b0>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d106      	bne.n	800035a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800034c:	4b5e      	ldr	r3, [pc, #376]	; (80004c8 <GPIO_PeriClockControl+0x1ac>)
 800034e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000350:	4a5d      	ldr	r2, [pc, #372]	; (80004c8 <GPIO_PeriClockControl+0x1ac>)
 8000352:	f043 0302 	orr.w	r3, r3, #2
 8000356:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000358:	e0ae      	b.n	80004b8 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a5c      	ldr	r2, [pc, #368]	; (80004d0 <GPIO_PeriClockControl+0x1b4>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d106      	bne.n	8000370 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000362:	4b59      	ldr	r3, [pc, #356]	; (80004c8 <GPIO_PeriClockControl+0x1ac>)
 8000364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000366:	4a58      	ldr	r2, [pc, #352]	; (80004c8 <GPIO_PeriClockControl+0x1ac>)
 8000368:	f043 0304 	orr.w	r3, r3, #4
 800036c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036e:	e0a3      	b.n	80004b8 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4a58      	ldr	r2, [pc, #352]	; (80004d4 <GPIO_PeriClockControl+0x1b8>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d106      	bne.n	8000386 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000378:	4b53      	ldr	r3, [pc, #332]	; (80004c8 <GPIO_PeriClockControl+0x1ac>)
 800037a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037c:	4a52      	ldr	r2, [pc, #328]	; (80004c8 <GPIO_PeriClockControl+0x1ac>)
 800037e:	f043 0308 	orr.w	r3, r3, #8
 8000382:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000384:	e098      	b.n	80004b8 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	4a53      	ldr	r2, [pc, #332]	; (80004d8 <GPIO_PeriClockControl+0x1bc>)
 800038a:	4293      	cmp	r3, r2
 800038c:	d106      	bne.n	800039c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800038e:	4b4e      	ldr	r3, [pc, #312]	; (80004c8 <GPIO_PeriClockControl+0x1ac>)
 8000390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000392:	4a4d      	ldr	r2, [pc, #308]	; (80004c8 <GPIO_PeriClockControl+0x1ac>)
 8000394:	f043 0310 	orr.w	r3, r3, #16
 8000398:	6313      	str	r3, [r2, #48]	; 0x30
}
 800039a:	e08d      	b.n	80004b8 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4a4f      	ldr	r2, [pc, #316]	; (80004dc <GPIO_PeriClockControl+0x1c0>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d106      	bne.n	80003b2 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80003a4:	4b48      	ldr	r3, [pc, #288]	; (80004c8 <GPIO_PeriClockControl+0x1ac>)
 80003a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a8:	4a47      	ldr	r2, [pc, #284]	; (80004c8 <GPIO_PeriClockControl+0x1ac>)
 80003aa:	f043 0320 	orr.w	r3, r3, #32
 80003ae:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b0:	e082      	b.n	80004b8 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4a4a      	ldr	r2, [pc, #296]	; (80004e0 <GPIO_PeriClockControl+0x1c4>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d106      	bne.n	80003c8 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80003ba:	4b43      	ldr	r3, [pc, #268]	; (80004c8 <GPIO_PeriClockControl+0x1ac>)
 80003bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003be:	4a42      	ldr	r2, [pc, #264]	; (80004c8 <GPIO_PeriClockControl+0x1ac>)
 80003c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003c4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c6:	e077      	b.n	80004b8 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	4a46      	ldr	r2, [pc, #280]	; (80004e4 <GPIO_PeriClockControl+0x1c8>)
 80003cc:	4293      	cmp	r3, r2
 80003ce:	d106      	bne.n	80003de <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80003d0:	4b3d      	ldr	r3, [pc, #244]	; (80004c8 <GPIO_PeriClockControl+0x1ac>)
 80003d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d4:	4a3c      	ldr	r2, [pc, #240]	; (80004c8 <GPIO_PeriClockControl+0x1ac>)
 80003d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003da:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003dc:	e06c      	b.n	80004b8 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4a41      	ldr	r2, [pc, #260]	; (80004e8 <GPIO_PeriClockControl+0x1cc>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d168      	bne.n	80004b8 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80003e6:	4b38      	ldr	r3, [pc, #224]	; (80004c8 <GPIO_PeriClockControl+0x1ac>)
 80003e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ea:	4a37      	ldr	r2, [pc, #220]	; (80004c8 <GPIO_PeriClockControl+0x1ac>)
 80003ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f2:	e061      	b.n	80004b8 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	4a33      	ldr	r2, [pc, #204]	; (80004c4 <GPIO_PeriClockControl+0x1a8>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d106      	bne.n	800040a <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DIS();
 80003fc:	4b32      	ldr	r3, [pc, #200]	; (80004c8 <GPIO_PeriClockControl+0x1ac>)
 80003fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000400:	4a31      	ldr	r2, [pc, #196]	; (80004c8 <GPIO_PeriClockControl+0x1ac>)
 8000402:	f023 0301 	bic.w	r3, r3, #1
 8000406:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000408:	e056      	b.n	80004b8 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	4a2f      	ldr	r2, [pc, #188]	; (80004cc <GPIO_PeriClockControl+0x1b0>)
 800040e:	4293      	cmp	r3, r2
 8000410:	d106      	bne.n	8000420 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DIS();
 8000412:	4b2d      	ldr	r3, [pc, #180]	; (80004c8 <GPIO_PeriClockControl+0x1ac>)
 8000414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000416:	4a2c      	ldr	r2, [pc, #176]	; (80004c8 <GPIO_PeriClockControl+0x1ac>)
 8000418:	f023 0302 	bic.w	r3, r3, #2
 800041c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800041e:	e04b      	b.n	80004b8 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4a2b      	ldr	r2, [pc, #172]	; (80004d0 <GPIO_PeriClockControl+0x1b4>)
 8000424:	4293      	cmp	r3, r2
 8000426:	d106      	bne.n	8000436 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DIS();
 8000428:	4b27      	ldr	r3, [pc, #156]	; (80004c8 <GPIO_PeriClockControl+0x1ac>)
 800042a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042c:	4a26      	ldr	r2, [pc, #152]	; (80004c8 <GPIO_PeriClockControl+0x1ac>)
 800042e:	f023 0304 	bic.w	r3, r3, #4
 8000432:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000434:	e040      	b.n	80004b8 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	4a26      	ldr	r2, [pc, #152]	; (80004d4 <GPIO_PeriClockControl+0x1b8>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d106      	bne.n	800044c <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DIS();
 800043e:	4b22      	ldr	r3, [pc, #136]	; (80004c8 <GPIO_PeriClockControl+0x1ac>)
 8000440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000442:	4a21      	ldr	r2, [pc, #132]	; (80004c8 <GPIO_PeriClockControl+0x1ac>)
 8000444:	f023 0308 	bic.w	r3, r3, #8
 8000448:	6313      	str	r3, [r2, #48]	; 0x30
}
 800044a:	e035      	b.n	80004b8 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	4a22      	ldr	r2, [pc, #136]	; (80004d8 <GPIO_PeriClockControl+0x1bc>)
 8000450:	4293      	cmp	r3, r2
 8000452:	d106      	bne.n	8000462 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DIS();
 8000454:	4b1c      	ldr	r3, [pc, #112]	; (80004c8 <GPIO_PeriClockControl+0x1ac>)
 8000456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000458:	4a1b      	ldr	r2, [pc, #108]	; (80004c8 <GPIO_PeriClockControl+0x1ac>)
 800045a:	f023 0310 	bic.w	r3, r3, #16
 800045e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000460:	e02a      	b.n	80004b8 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	4a1d      	ldr	r2, [pc, #116]	; (80004dc <GPIO_PeriClockControl+0x1c0>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d106      	bne.n	8000478 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DIS();
 800046a:	4b17      	ldr	r3, [pc, #92]	; (80004c8 <GPIO_PeriClockControl+0x1ac>)
 800046c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046e:	4a16      	ldr	r2, [pc, #88]	; (80004c8 <GPIO_PeriClockControl+0x1ac>)
 8000470:	f023 0320 	bic.w	r3, r3, #32
 8000474:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000476:	e01f      	b.n	80004b8 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4a19      	ldr	r2, [pc, #100]	; (80004e0 <GPIO_PeriClockControl+0x1c4>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d106      	bne.n	800048e <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DIS();
 8000480:	4b11      	ldr	r3, [pc, #68]	; (80004c8 <GPIO_PeriClockControl+0x1ac>)
 8000482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000484:	4a10      	ldr	r2, [pc, #64]	; (80004c8 <GPIO_PeriClockControl+0x1ac>)
 8000486:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800048a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800048c:	e014      	b.n	80004b8 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4a14      	ldr	r2, [pc, #80]	; (80004e4 <GPIO_PeriClockControl+0x1c8>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d106      	bne.n	80004a4 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DIS();
 8000496:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <GPIO_PeriClockControl+0x1ac>)
 8000498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800049a:	4a0b      	ldr	r2, [pc, #44]	; (80004c8 <GPIO_PeriClockControl+0x1ac>)
 800049c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a2:	e009      	b.n	80004b8 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	4a10      	ldr	r2, [pc, #64]	; (80004e8 <GPIO_PeriClockControl+0x1cc>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d105      	bne.n	80004b8 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DIS();
 80004ac:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <GPIO_PeriClockControl+0x1ac>)
 80004ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b0:	4a05      	ldr	r2, [pc, #20]	; (80004c8 <GPIO_PeriClockControl+0x1ac>)
 80004b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004b8:	bf00      	nop
 80004ba:	370c      	adds	r7, #12
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr
 80004c4:	40020000 	.word	0x40020000
 80004c8:	40023800 	.word	0x40023800
 80004cc:	40020400 	.word	0x40020400
 80004d0:	40020800 	.word	0x40020800
 80004d4:	40020c00 	.word	0x40020c00
 80004d8:	40021000 	.word	0x40021000
 80004dc:	40021400 	.word	0x40021400
 80004e0:	40021800 	.word	0x40021800
 80004e4:	40021c00 	.word	0x40021c00
 80004e8:	40022000 	.word	0x40022000

080004ec <GPIO_Init>:
*	-
*	- This function does not return anything
*	- No remarks
*/
void GPIO_Init(GPIO_Handle_t* pGPIOHandle)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx,ENABLE);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2101      	movs	r1, #1
 80004fa:	4618      	mov	r0, r3
 80004fc:	f7ff ff0e 	bl	800031c <GPIO_PeriClockControl>

	uint32_t temp = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	617b      	str	r3, [r7, #20]
	//configure GPIO pin mode
	if((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ANALOG)||(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode < GPIO_MODE_ALTFN)) //mode is non interrupt
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	795b      	ldrb	r3, [r3, #5]
 8000508:	2b03      	cmp	r3, #3
 800050a:	d003      	beq.n	8000514 <GPIO_Init+0x28>
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	795b      	ldrb	r3, [r3, #5]
 8000510:	2b01      	cmp	r3, #1
 8000512:	d81f      	bhi.n	8000554 <GPIO_Init+0x68>
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //since each pin mode takes 2 bits *2
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	795b      	ldrb	r3, [r3, #5]
 8000518:	461a      	mov	r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	791b      	ldrb	r3, [r3, #4]
 800051e:	005b      	lsls	r3, r3, #1
 8000520:	fa02 f303 	lsl.w	r3, r2, r3
 8000524:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));//clearing reg, to clear 2 bits, we & with ~3
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	681a      	ldr	r2, [r3, #0]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	791b      	ldrb	r3, [r3, #4]
 8000530:	4619      	mov	r1, r3
 8000532:	2303      	movs	r3, #3
 8000534:	408b      	lsls	r3, r1
 8000536:	43db      	mvns	r3, r3
 8000538:	4619      	mov	r1, r3
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	400a      	ands	r2, r1
 8000540:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;//setting reg
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	6819      	ldr	r1, [r3, #0]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	697a      	ldr	r2, [r7, #20]
 800054e:	430a      	orrs	r2, r1
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	e0c2      	b.n	80006da <GPIO_Init+0x1ee>
	}
	else //mode is interrupt based
	{
		// configure edge trigger
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	795b      	ldrb	r3, [r3, #5]
 8000558:	2b04      	cmp	r3, #4
 800055a:	d117      	bne.n	800058c <GPIO_Init+0xa0>
		{
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800055c:	4b47      	ldr	r3, [pc, #284]	; (800067c <GPIO_Init+0x190>)
 800055e:	68db      	ldr	r3, [r3, #12]
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	7912      	ldrb	r2, [r2, #4]
 8000564:	4611      	mov	r1, r2
 8000566:	2201      	movs	r2, #1
 8000568:	408a      	lsls	r2, r1
 800056a:	4611      	mov	r1, r2
 800056c:	4a43      	ldr	r2, [pc, #268]	; (800067c <GPIO_Init+0x190>)
 800056e:	430b      	orrs	r3, r1
 8000570:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);//Clear corresponding RTSR bit
 8000572:	4b42      	ldr	r3, [pc, #264]	; (800067c <GPIO_Init+0x190>)
 8000574:	689b      	ldr	r3, [r3, #8]
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	7912      	ldrb	r2, [r2, #4]
 800057a:	4611      	mov	r1, r2
 800057c:	2201      	movs	r2, #1
 800057e:	408a      	lsls	r2, r1
 8000580:	43d2      	mvns	r2, r2
 8000582:	4611      	mov	r1, r2
 8000584:	4a3d      	ldr	r2, [pc, #244]	; (800067c <GPIO_Init+0x190>)
 8000586:	400b      	ands	r3, r1
 8000588:	6093      	str	r3, [r2, #8]
 800058a:	e035      	b.n	80005f8 <GPIO_Init+0x10c>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	795b      	ldrb	r3, [r3, #5]
 8000590:	2b05      	cmp	r3, #5
 8000592:	d117      	bne.n	80005c4 <GPIO_Init+0xd8>
		{
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000594:	4b39      	ldr	r3, [pc, #228]	; (800067c <GPIO_Init+0x190>)
 8000596:	689b      	ldr	r3, [r3, #8]
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	7912      	ldrb	r2, [r2, #4]
 800059c:	4611      	mov	r1, r2
 800059e:	2201      	movs	r2, #1
 80005a0:	408a      	lsls	r2, r1
 80005a2:	4611      	mov	r1, r2
 80005a4:	4a35      	ldr	r2, [pc, #212]	; (800067c <GPIO_Init+0x190>)
 80005a6:	430b      	orrs	r3, r1
 80005a8:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);//Clear corresponding FTSR bit
 80005aa:	4b34      	ldr	r3, [pc, #208]	; (800067c <GPIO_Init+0x190>)
 80005ac:	68db      	ldr	r3, [r3, #12]
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	7912      	ldrb	r2, [r2, #4]
 80005b2:	4611      	mov	r1, r2
 80005b4:	2201      	movs	r2, #1
 80005b6:	408a      	lsls	r2, r1
 80005b8:	43d2      	mvns	r2, r2
 80005ba:	4611      	mov	r1, r2
 80005bc:	4a2f      	ldr	r2, [pc, #188]	; (800067c <GPIO_Init+0x190>)
 80005be:	400b      	ands	r3, r1
 80005c0:	60d3      	str	r3, [r2, #12]
 80005c2:	e019      	b.n	80005f8 <GPIO_Init+0x10c>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	795b      	ldrb	r3, [r3, #5]
 80005c8:	2b06      	cmp	r3, #6
 80005ca:	d115      	bne.n	80005f8 <GPIO_Init+0x10c>
		{
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005cc:	4b2b      	ldr	r3, [pc, #172]	; (800067c <GPIO_Init+0x190>)
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	7912      	ldrb	r2, [r2, #4]
 80005d4:	4611      	mov	r1, r2
 80005d6:	2201      	movs	r2, #1
 80005d8:	408a      	lsls	r2, r1
 80005da:	4611      	mov	r1, r2
 80005dc:	4a27      	ldr	r2, [pc, #156]	; (800067c <GPIO_Init+0x190>)
 80005de:	430b      	orrs	r3, r1
 80005e0:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005e2:	4b26      	ldr	r3, [pc, #152]	; (800067c <GPIO_Init+0x190>)
 80005e4:	68db      	ldr	r3, [r3, #12]
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	7912      	ldrb	r2, [r2, #4]
 80005ea:	4611      	mov	r1, r2
 80005ec:	2201      	movs	r2, #1
 80005ee:	408a      	lsls	r2, r1
 80005f0:	4611      	mov	r1, r2
 80005f2:	4a22      	ldr	r2, [pc, #136]	; (800067c <GPIO_Init+0x190>)
 80005f4:	430b      	orrs	r3, r1
 80005f6:	60d3      	str	r3, [r2, #12]
		{

		}

		//configure which GPIO port(A,B,C,D,E,F,G,H,I) Should takeover EXTI pin for interrupt via SYSCFG_EXTICR register,
		uint8_t temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	791b      	ldrb	r3, [r3, #4]
 80005fc:	089b      	lsrs	r3, r3, #2
 80005fe:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	791b      	ldrb	r3, [r3, #4]
 8000604:	f003 0303 	and.w	r3, r3, #3
 8000608:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a1c      	ldr	r2, [pc, #112]	; (8000680 <GPIO_Init+0x194>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d045      	beq.n	80006a0 <GPIO_Init+0x1b4>
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a1a      	ldr	r2, [pc, #104]	; (8000684 <GPIO_Init+0x198>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d02b      	beq.n	8000676 <GPIO_Init+0x18a>
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a19      	ldr	r2, [pc, #100]	; (8000688 <GPIO_Init+0x19c>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d024      	beq.n	8000672 <GPIO_Init+0x186>
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a17      	ldr	r2, [pc, #92]	; (800068c <GPIO_Init+0x1a0>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d01d      	beq.n	800066e <GPIO_Init+0x182>
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a16      	ldr	r2, [pc, #88]	; (8000690 <GPIO_Init+0x1a4>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d016      	beq.n	800066a <GPIO_Init+0x17e>
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a14      	ldr	r2, [pc, #80]	; (8000694 <GPIO_Init+0x1a8>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d00f      	beq.n	8000666 <GPIO_Init+0x17a>
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a13      	ldr	r2, [pc, #76]	; (8000698 <GPIO_Init+0x1ac>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d008      	beq.n	8000662 <GPIO_Init+0x176>
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a11      	ldr	r2, [pc, #68]	; (800069c <GPIO_Init+0x1b0>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d101      	bne.n	800065e <GPIO_Init+0x172>
 800065a:	2307      	movs	r3, #7
 800065c:	e021      	b.n	80006a2 <GPIO_Init+0x1b6>
 800065e:	2300      	movs	r3, #0
 8000660:	e01f      	b.n	80006a2 <GPIO_Init+0x1b6>
 8000662:	2306      	movs	r3, #6
 8000664:	e01d      	b.n	80006a2 <GPIO_Init+0x1b6>
 8000666:	2305      	movs	r3, #5
 8000668:	e01b      	b.n	80006a2 <GPIO_Init+0x1b6>
 800066a:	2304      	movs	r3, #4
 800066c:	e019      	b.n	80006a2 <GPIO_Init+0x1b6>
 800066e:	2303      	movs	r3, #3
 8000670:	e017      	b.n	80006a2 <GPIO_Init+0x1b6>
 8000672:	2302      	movs	r3, #2
 8000674:	e015      	b.n	80006a2 <GPIO_Init+0x1b6>
 8000676:	2301      	movs	r3, #1
 8000678:	e013      	b.n	80006a2 <GPIO_Init+0x1b6>
 800067a:	bf00      	nop
 800067c:	40013c00 	.word	0x40013c00
 8000680:	40020000 	.word	0x40020000
 8000684:	40020400 	.word	0x40020400
 8000688:	40020800 	.word	0x40020800
 800068c:	40020c00 	.word	0x40020c00
 8000690:	40021000 	.word	0x40021000
 8000694:	40021400 	.word	0x40021400
 8000698:	40021800 	.word	0x40021800
 800069c:	40021c00 	.word	0x40021c00
 80006a0:	2300      	movs	r3, #0
 80006a2:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80006a4:	4b5c      	ldr	r3, [pc, #368]	; (8000818 <GPIO_Init+0x32c>)
 80006a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a8:	4a5b      	ldr	r2, [pc, #364]	; (8000818 <GPIO_Init+0x32c>)
 80006aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ae:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] =portcode << (temp2 * 4);
 80006b0:	7c7a      	ldrb	r2, [r7, #17]
 80006b2:	7cbb      	ldrb	r3, [r7, #18]
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	fa02 f103 	lsl.w	r1, r2, r3
 80006ba:	4a58      	ldr	r2, [pc, #352]	; (800081c <GPIO_Init+0x330>)
 80006bc:	7cfb      	ldrb	r3, [r7, #19]
 80006be:	3302      	adds	r3, #2
 80006c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		//enable EXTI interrupt delivery using IMR (interrupt mode register)
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006c4:	4b56      	ldr	r3, [pc, #344]	; (8000820 <GPIO_Init+0x334>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	7912      	ldrb	r2, [r2, #4]
 80006cc:	4611      	mov	r1, r2
 80006ce:	2201      	movs	r2, #1
 80006d0:	408a      	lsls	r2, r1
 80006d2:	4611      	mov	r1, r2
 80006d4:	4a52      	ldr	r2, [pc, #328]	; (8000820 <GPIO_Init+0x334>)
 80006d6:	430b      	orrs	r3, r1
 80006d8:	6013      	str	r3, [r2, #0]

	}

	temp = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]
	//configure the GPIO pin speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //since each pin speed mode takes 2 bits *2
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	799b      	ldrb	r3, [r3, #6]
 80006e2:	461a      	mov	r2, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	791b      	ldrb	r3, [r3, #4]
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	fa02 f303 	lsl.w	r3, r2, r3
 80006ee:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));//clearing reg, to clear 2 bits, we & with ~3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	689a      	ldr	r2, [r3, #8]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	791b      	ldrb	r3, [r3, #4]
 80006fa:	4619      	mov	r1, r3
 80006fc:	2303      	movs	r3, #3
 80006fe:	408b      	lsls	r3, r1
 8000700:	43db      	mvns	r3, r3
 8000702:	4619      	mov	r1, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	400a      	ands	r2, r1
 800070a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;//setting reg
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	6899      	ldr	r1, [r3, #8]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	697a      	ldr	r2, [r7, #20]
 8000718:	430a      	orrs	r2, r1
 800071a:	609a      	str	r2, [r3, #8]


	temp = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
	//configure the pull up pull down mode
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber))); //since each pin PUPD mode is off 1 bit
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	79db      	ldrb	r3, [r3, #7]
 8000724:	461a      	mov	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	791b      	ldrb	r3, [r3, #4]
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	fa02 f303 	lsl.w	r3, r2, r3
 8000730:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));//clearing reg,
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	68da      	ldr	r2, [r3, #12]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	791b      	ldrb	r3, [r3, #4]
 800073c:	4619      	mov	r1, r3
 800073e:	2303      	movs	r3, #3
 8000740:	408b      	lsls	r3, r1
 8000742:	43db      	mvns	r3, r3
 8000744:	4619      	mov	r1, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	400a      	ands	r2, r1
 800074c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;//setting reg
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	68d9      	ldr	r1, [r3, #12]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	697a      	ldr	r2, [r7, #20]
 800075a:	430a      	orrs	r2, r1
 800075c:	60da      	str	r2, [r3, #12]


	temp = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
	//configure the pin output type mode
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));//since each pin Output mode is off 1 bit
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	7a1b      	ldrb	r3, [r3, #8]
 8000766:	461a      	mov	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	791b      	ldrb	r3, [r3, #4]
 800076c:	fa02 f303 	lsl.w	r3, r2, r3
 8000770:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);//clearing reg,
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	685a      	ldr	r2, [r3, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	791b      	ldrb	r3, [r3, #4]
 800077c:	4619      	mov	r1, r3
 800077e:	2301      	movs	r3, #1
 8000780:	408b      	lsls	r3, r1
 8000782:	43db      	mvns	r3, r3
 8000784:	4619      	mov	r1, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	400a      	ands	r2, r1
 800078c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;//setting reg
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	6859      	ldr	r1, [r3, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	697a      	ldr	r2, [r7, #20]
 800079a:	430a      	orrs	r2, r1
 800079c:	605a      	str	r2, [r3, #4]


	temp = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
	//configure the alternating functionality mode if the mode is other than GPIO
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	795b      	ldrb	r3, [r3, #5]
 80007a6:	2b02      	cmp	r3, #2
 80007a8:	d131      	bne.n	800080e <GPIO_Init+0x322>
	{
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	791b      	ldrb	r3, [r3, #4]
 80007ae:	08db      	lsrs	r3, r3, #3
 80007b0:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	791b      	ldrb	r3, [r3, #4]
 80007b6:	f003 0307 	and.w	r3, r3, #7
 80007ba:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));//clearing reg,
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	7c3a      	ldrb	r2, [r7, #16]
 80007c2:	3208      	adds	r2, #8
 80007c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	220f      	movs	r2, #15
 80007ce:	fa02 f303 	lsl.w	r3, r2, r3
 80007d2:	43db      	mvns	r3, r3
 80007d4:	4618      	mov	r0, r3
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	7c3a      	ldrb	r2, [r7, #16]
 80007dc:	4001      	ands	r1, r0
 80007de:	3208      	adds	r2, #8
 80007e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= ((pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode) << (4 * temp2));//setting reg
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	7c3a      	ldrb	r2, [r7, #16]
 80007ea:	3208      	adds	r2, #8
 80007ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	7a5b      	ldrb	r3, [r3, #9]
 80007f4:	461a      	mov	r2, r3
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	fa02 f303 	lsl.w	r3, r2, r3
 80007fe:	4618      	mov	r0, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	7c3a      	ldrb	r2, [r7, #16]
 8000806:	4301      	orrs	r1, r0
 8000808:	3208      	adds	r2, #8
 800080a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

}
 800080e:	bf00      	nop
 8000810:	3718      	adds	r7, #24
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800
 800081c:	40013800 	.word	0x40013800
 8000820:	40013c00 	.word	0x40013c00

08000824 <SPI_PeriClockControl>:
*	-
*	- This function does not return anything
*	- No remarks
*/
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	460b      	mov	r3, r1
 800082e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000830:	78fb      	ldrb	r3, [r7, #3]
 8000832:	2b01      	cmp	r3, #1
 8000834:	d120      	bne.n	8000878 <SPI_PeriClockControl+0x54>
	{
		if(pSPIx == SPI1)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4a22      	ldr	r2, [pc, #136]	; (80008c4 <SPI_PeriClockControl+0xa0>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d106      	bne.n	800084c <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 800083e:	4b22      	ldr	r3, [pc, #136]	; (80008c8 <SPI_PeriClockControl+0xa4>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000842:	4a21      	ldr	r2, [pc, #132]	; (80008c8 <SPI_PeriClockControl+0xa4>)
 8000844:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000848:	6453      	str	r3, [r2, #68]	; 0x44
		{
			SPI3_PCLK_DIS();
		}
	}

}
 800084a:	e035      	b.n	80008b8 <SPI_PeriClockControl+0x94>
		else if(pSPIx == SPI2)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	4a1f      	ldr	r2, [pc, #124]	; (80008cc <SPI_PeriClockControl+0xa8>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d106      	bne.n	8000862 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000854:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <SPI_PeriClockControl+0xa4>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000858:	4a1b      	ldr	r2, [pc, #108]	; (80008c8 <SPI_PeriClockControl+0xa4>)
 800085a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800085e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000860:	e02a      	b.n	80008b8 <SPI_PeriClockControl+0x94>
		else if(pSPIx == SPI3)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4a1a      	ldr	r2, [pc, #104]	; (80008d0 <SPI_PeriClockControl+0xac>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d126      	bne.n	80008b8 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 800086a:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <SPI_PeriClockControl+0xa4>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	4a16      	ldr	r2, [pc, #88]	; (80008c8 <SPI_PeriClockControl+0xa4>)
 8000870:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000874:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000876:	e01f      	b.n	80008b8 <SPI_PeriClockControl+0x94>
		if(pSPIx == SPI1)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <SPI_PeriClockControl+0xa0>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d106      	bne.n	800088e <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DIS();
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <SPI_PeriClockControl+0xa4>)
 8000882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000884:	4a10      	ldr	r2, [pc, #64]	; (80008c8 <SPI_PeriClockControl+0xa4>)
 8000886:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800088a:	6453      	str	r3, [r2, #68]	; 0x44
}
 800088c:	e014      	b.n	80008b8 <SPI_PeriClockControl+0x94>
		else if(pSPIx == SPI2)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4a0e      	ldr	r2, [pc, #56]	; (80008cc <SPI_PeriClockControl+0xa8>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d106      	bne.n	80008a4 <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DIS();
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <SPI_PeriClockControl+0xa4>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	4a0b      	ldr	r2, [pc, #44]	; (80008c8 <SPI_PeriClockControl+0xa4>)
 800089c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80008a0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008a2:	e009      	b.n	80008b8 <SPI_PeriClockControl+0x94>
		else if(pSPIx == SPI3)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <SPI_PeriClockControl+0xac>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d105      	bne.n	80008b8 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DIS();
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <SPI_PeriClockControl+0xa4>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b0:	4a05      	ldr	r2, [pc, #20]	; (80008c8 <SPI_PeriClockControl+0xa4>)
 80008b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008b6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	40013000 	.word	0x40013000
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40003800 	.word	0x40003800
 80008d0:	40003c00 	.word	0x40003c00

080008d4 <SPI_Init>:
*	-
*	- This function does not return anything
*	- No remarks
*/
void SPI_Init(SPI_Handle_t* pSPIHandle)/* for initializing the SPI pin/port */
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]

	SPI_PeriClockControl(pSPIHandle->pSPIx,ENABLE);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2101      	movs	r1, #1
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff ff9e 	bl	8000824 <SPI_PeriClockControl>
	uint32_t tempreg = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]

	//configure device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << 2;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	791b      	ldrb	r3, [r3, #4]
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	461a      	mov	r2, r3
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	4313      	orrs	r3, r2
 80008f8:	60fb      	str	r3, [r7, #12]

	//configure bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	795b      	ldrb	r3, [r3, #5]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d104      	bne.n	800090c <SPI_Init+0x38>
	{
		//bi directional mode to be cleared
		tempreg &= ~(1<<15);
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	e014      	b.n	8000936 <SPI_Init+0x62>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	795b      	ldrb	r3, [r3, #5]
 8000910:	2b02      	cmp	r3, #2
 8000912:	d104      	bne.n	800091e <SPI_Init+0x4a>
	{
		//bi directional mode to be set
		tempreg |= (1<<15);
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	e00b      	b.n	8000936 <SPI_Init+0x62>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	795b      	ldrb	r3, [r3, #5]
 8000922:	2b03      	cmp	r3, #3
 8000924:	d107      	bne.n	8000936 <SPI_Init+0x62>
	{
		//bi directional mode to be cleared
		tempreg &= ~(1<<15);
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800092c:	60fb      	str	r3, [r7, #12]
		//RXONLY in CR1 must be set to force the clock
		tempreg |= (1 << 10);
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000934:	60fb      	str	r3, [r7, #12]
	}

	//configure SPI serial clock speed  (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << 3;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	799b      	ldrb	r3, [r3, #6]
 800093a:	00db      	lsls	r3, r3, #3
 800093c:	461a      	mov	r2, r3
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	4313      	orrs	r3, r2
 8000942:	60fb      	str	r3, [r7, #12]

	//configure SPI DFF frame format
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << 11;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	79db      	ldrb	r3, [r3, #7]
 8000948:	02db      	lsls	r3, r3, #11
 800094a:	461a      	mov	r2, r3
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	4313      	orrs	r3, r2
 8000950:	60fb      	str	r3, [r7, #12]

	//configure SPI CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << 1;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	7a1b      	ldrb	r3, [r3, #8]
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	461a      	mov	r2, r3
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	4313      	orrs	r3, r2
 800095e:	60fb      	str	r3, [r7, #12]

	//configure SPI CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << 0;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	7a5b      	ldrb	r3, [r3, #9]
 8000964:	461a      	mov	r2, r3
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	4313      	orrs	r3, r2
 800096a:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	68fa      	ldr	r2, [r7, #12]
 8000972:	601a      	str	r2, [r3, #0]

}
 8000974:	bf00      	nop
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <SPI_GetFlagStatus>:
	}

}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t* pSPIx, uint32_t FlagName)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	689a      	ldr	r2, [r3, #8]
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	4013      	ands	r3, r2
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000992:	2301      	movs	r3, #1
 8000994:	e000      	b.n	8000998 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000996:	2300      	movs	r3, #0
}
 8000998:	4618      	mov	r0, r3
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <SPI_SendData>:

/* SPI data send and receive (Blocking, Polling, Non-interrupt based APIs) */
// Called blocking API as waits until all bytes of "Len" are transmitted and while loops can hang permanently
void SPI_SendData(SPI_RegDef_t* pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 80009b0:	e027      	b.n	8000a02 <SPI_SendData+0x5e>
	{
		//wait while TXE reg is set, always check TXE before writing data
		//while(!(pSPIx->SR & (1 << 1))); //waits until set, instead implementing a function
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 80009b2:	bf00      	nop
 80009b4:	2102      	movs	r1, #2
 80009b6:	68f8      	ldr	r0, [r7, #12]
 80009b8:	f7ff ffe0 	bl	800097c <SPI_GetFlagStatus>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d0f8      	beq.n	80009b4 <SPI_SendData+0x10>

		//check DFF bit in CR1
		if((pSPIx->CR1 & (1 << SPI_CR1_DFF))) //16 bit data
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d00e      	beq.n	80009ec <SPI_SendData+0x48>
		{
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	881b      	ldrh	r3, [r3, #0]
 80009d2:	461a      	mov	r2, r3
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	60da      	str	r2, [r3, #12]
			Len--;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	3b01      	subs	r3, #1
 80009dc:	607b      	str	r3, [r7, #4]
			Len--;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	3b01      	subs	r3, #1
 80009e2:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++; //increment the TXBUFFER
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	3301      	adds	r3, #1
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	e00a      	b.n	8000a02 <SPI_SendData+0x5e>
		}
		else
		{
			pSPIx->DR = *(pTxBuffer);
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	461a      	mov	r2, r3
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	60da      	str	r2, [r3, #12]
			Len--;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	3b01      	subs	r3, #1
 80009fa:	607b      	str	r3, [r7, #4]
			pTxBuffer++; //increment the TXBUFFER
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	3301      	adds	r3, #1
 8000a00:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d1d4      	bne.n	80009b2 <SPI_SendData+0xe>
		}
	}
}
 8000a08:	bf00      	nop
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <SPI_PeripheralControl>:

void SPI_PeripheralControl(SPI_RegDef_t* pSPIx, uint8_t EnOrDi)
{
 8000a12:	b480      	push	{r7}
 8000a14:	b083      	sub	sp, #12
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000a1e:	78fb      	ldrb	r3, [r7, #3]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d106      	bne.n	8000a32 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE); //SPE bit is SPI ENABLE bit
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000a30:	e005      	b.n	8000a3e <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	601a      	str	r2, [r3, #0]
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <SPI_SSIConfig>:

void SPI_SSIConfig(SPI_RegDef_t* pSPIx, uint8_t EnOrDi)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
 8000a52:	460b      	mov	r3, r1
 8000a54:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000a56:	78fb      	ldrb	r3, [r7, #3]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d106      	bne.n	8000a6a <SPI_SSIConfig+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SSI);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	601a      	str	r2, [r3, #0]
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
	}

}
 8000a68:	e005      	b.n	8000a76 <SPI_SSIConfig+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	601a      	str	r2, [r3, #0]
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
	...

08000a84 <__libc_init_array>:
 8000a84:	b570      	push	{r4, r5, r6, lr}
 8000a86:	4d0d      	ldr	r5, [pc, #52]	; (8000abc <__libc_init_array+0x38>)
 8000a88:	4c0d      	ldr	r4, [pc, #52]	; (8000ac0 <__libc_init_array+0x3c>)
 8000a8a:	1b64      	subs	r4, r4, r5
 8000a8c:	10a4      	asrs	r4, r4, #2
 8000a8e:	2600      	movs	r6, #0
 8000a90:	42a6      	cmp	r6, r4
 8000a92:	d109      	bne.n	8000aa8 <__libc_init_array+0x24>
 8000a94:	4d0b      	ldr	r5, [pc, #44]	; (8000ac4 <__libc_init_array+0x40>)
 8000a96:	4c0c      	ldr	r4, [pc, #48]	; (8000ac8 <__libc_init_array+0x44>)
 8000a98:	f000 f818 	bl	8000acc <_init>
 8000a9c:	1b64      	subs	r4, r4, r5
 8000a9e:	10a4      	asrs	r4, r4, #2
 8000aa0:	2600      	movs	r6, #0
 8000aa2:	42a6      	cmp	r6, r4
 8000aa4:	d105      	bne.n	8000ab2 <__libc_init_array+0x2e>
 8000aa6:	bd70      	pop	{r4, r5, r6, pc}
 8000aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aac:	4798      	blx	r3
 8000aae:	3601      	adds	r6, #1
 8000ab0:	e7ee      	b.n	8000a90 <__libc_init_array+0xc>
 8000ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ab6:	4798      	blx	r3
 8000ab8:	3601      	adds	r6, #1
 8000aba:	e7f2      	b.n	8000aa2 <__libc_init_array+0x1e>
 8000abc:	08000af0 	.word	0x08000af0
 8000ac0:	08000af0 	.word	0x08000af0
 8000ac4:	08000af0 	.word	0x08000af0
 8000ac8:	08000af4 	.word	0x08000af4

08000acc <_init>:
 8000acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ace:	bf00      	nop
 8000ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ad2:	bc08      	pop	{r3}
 8000ad4:	469e      	mov	lr, r3
 8000ad6:	4770      	bx	lr

08000ad8 <_fini>:
 8000ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ada:	bf00      	nop
 8000adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ade:	bc08      	pop	{r3}
 8000ae0:	469e      	mov	lr, r3
 8000ae2:	4770      	bx	lr
